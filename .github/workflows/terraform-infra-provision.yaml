name: "Terraform EKS Provision"

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      confirm:
        description: 'Should TF script be applied? (yes or no)'
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      namespace:
        description: 'The EKS namespace where you want to deploy/remove resources'
        required: true
        default: 'stage'
        options:
          - stage
          - prod

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-3
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: terraform init

      - name: Terraform Workspace
        run: |
          if [ "${{ github.event.inputs.namespace }}" == "prod" ]; then
            terraform workspace select production
          else
            terraform workspace select stage
          fi

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform plan -no-color -out=plan.out -detailed-exitcode -var-file="${{ github.event.inputs.namespace }}.tfvars" | tee terraform_plan.log
          else
            terraform plan -destroy -out=plan.out -var-file="${{ github.event.inputs.namespace }}.tfvars | tee terraform_plan.log
          fi
        continue-on-error: true

      - name: Display Terraform Plan Log
        if: steps.plan.outcome == 'failure'
        run: cat terraform_plan.log

      - name: Apply Terraform Configuration
        if: ${{ github.event.inputs.confirm == 'yes' && github.event.inputs.action == 'apply' }}
        run: terraform apply --auto-approve -var-file="${{ github.event.inputs.namespace }}.tfvars plan.out

      - name: Destroy Terraform Configuration
        if: ${{ github.event.inputs.confirm == 'yes' && github.event.inputs.action == 'destroy' }}
        run: terraform destroy --auto-approve -var-file="${{ github.event.inputs.namespace }}.tfvars

      - name: Cleaning Up Residual Resources
        if: success() && github.event.inputs.action  == 'destroy'
        run: |
          terraform plan -destroy -out=remaining_plan.out -var-file="${{ github.event.inputs.namespace }}.tfvars | tee cleanup_plan.log 

      - name: Apply Cleanup Plan
        if: success() && github.event.inputs.action == 'destroy' && github.event.inputs.confirm == 'yes'
        run: terraform apply --auto-approve -var-file="${{ github.event.inputs.namespace }}.tfvars remaining_plan.out

      - name: Display Terraform Cleanup Plan Log
        if: failure()
        run: cat cleanup_plan.log